name: Docker Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: phpweave:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm phpweave:test php -v
        docker run --rm phpweave:test php -m | grep apcu
        docker run --rm phpweave:test php -m | grep pdo_mysql

    - name: Create test container
      run: |
        docker run -d --name phpweave-test \
          -e DOCKER_ENV=1 \
          -v $PWD:/var/www/html \
          phpweave:test
        sleep 3

    - name: Run tests in container
      run: |
        docker exec phpweave-test php tests/test_hooks.php
        docker exec phpweave-test php tests/test_models.php
        docker exec phpweave-test php tests/test_controllers.php
        docker exec phpweave-test php tests/test_libraries.php
        docker exec phpweave-test php tests/test_docker_caching.php
        docker exec phpweave-test php tests/benchmark_optimizations.php

    - name: Check APCu functionality
      run: |
        docker exec phpweave-test php -r "
        if (function_exists('apcu_store') && function_exists('apcu_fetch')) {
          apcu_store('test_key', 'test_value', 60);
          \$val = apcu_fetch('test_key');
          if (\$val === 'test_value') {
            echo 'APCu is working correctly\n';
            exit(0);
          }
        }
        echo 'APCu test failed\n';
        exit(1);
        "

    - name: Stop test container
      if: always()
      run: docker stop phpweave-test && docker rm phpweave-test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    # Only run on main branch or tags, and only if not a pull request
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && github.repository_owner == 'clintcan'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Convert repository name to lowercase
      id: repo
      run: |
        echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Repository: $(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: Verify registry access
      run: |
        echo "Logged in as: ${{ github.actor }}"
        echo "Target registry: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: false

  test-docker-compose:
    name: Test Docker Compose Deployments
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compose-file:
          - docker-compose.yml
          - docker-compose.dev.yml
          - docker-compose.env.yml

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create required directories
      run: |
        mkdir -p cache storage/queue
        chmod 755 cache storage/queue

    - name: Create .env file for docker-compose.yml
      if: matrix.compose-file == 'docker-compose.yml'
      run: |
        cat > .env <<EOF
        DBHOST=db
        DBNAME=phpweave
        DBUSER=phpweave_user
        DBPASSWORD=phpweave_pass
        DBCHARSET=utf8mb4
        DEBUG=0
        EOF

    - name: Start services
      run: docker compose -f ${{ matrix.compose-file }} up -d

    - name: Wait for services
      run: sleep 10

    - name: Check service health
      run: |
        docker compose -f ${{ matrix.compose-file }} ps
        curl -f http://localhost:8080 || echo "Warning: HTTP check failed"

    - name: Run tests in container
      run: |
        CONTAINER=$(docker compose -f ${{ matrix.compose-file }} ps -q phpweave | head -n1)
        if [ ! -z "$CONTAINER" ]; then
          docker exec $CONTAINER php tests/test_hooks.php
          docker exec $CONTAINER php tests/test_models.php
          docker exec $CONTAINER php tests/test_controllers.php
          docker exec $CONTAINER php tests/test_libraries.php
          docker exec $CONTAINER php tests/test_docker_caching.php
        fi

    - name: Check logs
      if: always()
      run: docker compose -f ${{ matrix.compose-file }} logs

    - name: Stop services
      if: always()
      run: docker compose -f ${{ matrix.compose-file }} down -v
