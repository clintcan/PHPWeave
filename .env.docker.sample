# Sample environment variables for Docker/Kubernetes deployments
# Copy this file and set your environment variables, then export them before running docker-compose

# Database Configuration (DB_* naming convention for Kubernetes-style)
DB_HOST=db
DB_NAME=phpweave
DB_USER=phpweave_user
DB_PASSWORD=change_this_password
DB_CHARSET=utf8mb4

# MySQL Database (for docker-compose)
MYSQL_ROOT_PASSWORD=change_root_password

# Application Settings
DEBUG=0
DOCKER_ENV=production
PHPWEAVE_ENV=production

# Port Configuration (optional overrides)
APP_PORT=8080        # For docker-compose.yml
DEV_PORT=8080        # For docker-compose.dev.yml
NGINX_PORT=80        # For docker-compose.scale.yml

# Xdebug Configuration (for development)
XDEBUG_MODE=debug

# Usage Examples:
#
# 1. Basic usage with docker-compose.env.yml:
#    cp .env.docker.sample .env.docker
#    nano .env.docker  # Edit with your values
#    source .env.docker
#    docker compose -f docker-compose.env.yml up -d
#
# 2. Development with docker-compose.dev.yml:
#    source .env.docker
#    docker compose -f docker-compose.dev.yml up -d
#
# 3. Scaled deployment with docker-compose.scale.yml:
#    source .env.docker
#    docker compose -f docker-compose.scale.yml up -d
#
# 4. Export variables manually (alternative to sourcing):
#    export DB_PASSWORD=my_secure_password
#    export DB_USER=custom_user
#    docker compose -f docker-compose.env.yml up -d
#
# Note: The ${VAR:-default} syntax in docker-compose files means:
#       - Use host's $VAR if set
#       - Otherwise use the default value specified after :-
